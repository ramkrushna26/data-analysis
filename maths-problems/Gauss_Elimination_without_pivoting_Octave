
size_of_matrix = input("Enter size of nxn matrix: ")  
floating_num_pricision = input("Enter floating number precision: ")  

output_precision(floating_num_pricision+1)

A = rand(size_of_matrix)  
b = rand(size_of_matrix, 1)  
A_tilde = [A b]  

if (rank(A_tilde) == rank(A) && rank(A) == size_of_matrix)  
    disp("As rank of augmented matrix and coeffiecient matrix is same, so system had unique solns")  
else  
    disp("System can not be solved using Gauss method")  
end;  

for column_no=1:size_of_matrix-1
    for row_no=column_no+1:size_of_matrix
        multiplier=A_tilde(row_no,column_no)/A_tilde(column_no,column_no)
        A_tilde(row_no,:)=A_tilde(row_no,:)-multiplier*A_tilde(column_no,:)
    end
end  

result_matrix=zeros(size_of_matrix,1)

while result_row_no > 0   
    temp=A_tilde(result_row_no,result_row_no+1)/A_tilde(result_row_no,result_row_no)  
	sum=0  
    for item=result_row_no:size_of_matrix-1  
		sum+=(A_tilde(item,item+1)*result_matrix(item+1,1))/A_tilde(item,item)  
	end  
	result_matrix(result_row_no,1)=temp-sum  
	result_row_no=result_row_no-1  
end  

for item=1:size_of_matrix   
    fprintf('x(%d) = %f\n',item,result_matrix(item))  
end   

